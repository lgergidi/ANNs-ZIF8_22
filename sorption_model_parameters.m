function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-Jul-2022 09:22:30.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [16.04;273;0.01];
x1_step1.gain = [0.0475285171102662;0.02;0.02000200020002];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.26190952842227410713;0.07445866754430043033;6.3299435088749946843];
IW1_1 = [0.8152138028487788679 -0.085230331892812108419 0.18919735772240178773;0.30306734048520966862 -0.087069964422032103402 0.10253287737659551315;0.83225911003602748295 -0.1088156432252801592 6.7495764548917644987];

% Layer 2
b2 = [-2.0773690968695488479;-1.1471915027775787532;1.9245717467179490612];
LW2_1 = [-13.530160716856393321 6.0541831440064459713 11.485931414020351227;-2.3638843386926793322 6.0301419927547454947 0.47123351474552244156;2.5165421990286915843 -7.1261269543425198592 -0.68508417302842083974];

% Layer 3
b3 = [1.904208205899081463;-0.81123955649487977659;2.3023356897495648177];
LW3_2 = [2.2023000238229406555 -6.8257774127769001993 -2.8269153810853797637;0.21903031917332205225 1.8044397205630564596 1.2938236832811376154;2.0143462529436679809 -5.7268651237070704596 -2.4882317499548292083];

% Layer 4
b4 = -5.0293971223908835455;
LW4_3 = [-3.5518494601463177496 1.2688942682178039334 8.7334881300699827023];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0900737337955242;
y1_step1.xoffset = 0.0027375;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = tansig_apply(repmat(b3,1,Q) + LW3_2*a2);
    
    % Layer 4
    a4 = repmat(b4,1,Q) + LW4_3*a3;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a4,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(4,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
